<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:cc="http://java.sun.com/jsf/composite"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:pe="http://primefaces.prime.com.tr/ui"
                xmlns:p="http://primefaces.org/ui">

    <cc:interface>
        <cc:attribute name="id" required="true"/>
        <cc:attribute name="value"/>
        <cc:attribute name="text"/>
        <cc:attribute name="ionIcon"/>
        <cc:attribute name="showDetail"/>
        <cc:attribute name="current" default="false"/>
    </cc:interface>

    <cc:implementation>

        <h:panelGroup rendered="#{cc.attrs.value ne '[]' and cc.attrs.value ne '[{}]'}">
            <div class="canvas-holder col-md-12 col-xs-12">
                <canvas id="#{cc.attrs.id}" />
            </div>
        </h:panelGroup>

        <h:panelGroup rendered="#{cc.attrs.value eq '[]' or cc.attrs.value eq '[{}]'}">
            <p:outputLabel value="Nenhum resultado"/>
        </h:panelGroup>


        <style>
            .doughnut-legend li{
                padding-left: 0px !important;
            }
        </style>

        <script type='text/javascript' src='media/js/chart.min.js'></script>

        <script>
            
            // <![CDATA[
            
            (function(){
                
                helpers = Chart.helpers;

                Chart.defaults.global.responsive = true;

                // Modular doughnut
                (function(){

                    var canvas = document.getElementById('#{cc.attrs.id}'),
                    classeLegenda = "col-sm-12";

                    var moduleData = [];
                    var cores = [];

                    var values = #{cc.attrs.value};
                    var current = #{cc.attrs.current};

                    for(var i=0; i < values.length; i++){

                        var cor = corAleatoriaProxima("#5e72e4", 160);
                        cores[i] = cor;

                        if (values[i].value > 0) {

                            moduleData.push(
                            {
                                label: values[i].name,
                                value: (current ? Number(values[i].value).toFixed(2) : values[i].value),
                                color: cor,
                                highlight: Colour(cor, 10)
                            });
                        }
                    }

                    if (moduleData.length > 7) {
                        classeLegenda = "col-sm-9";
                    }

                    var moduleDoughnut = new Chart(canvas.getContext('2d')).Doughnut(moduleData, { 
                        tooltipTemplate : "<%if (label){%><%=label%>" + (current ? ': R$' : ':') + " <%}%><%= value %>", 
                        animation: false,
                        legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend col-md-12\"><% for (var i=0; i<segments.length; i++){%><li class=\"" + classeLegenda + "\"><span style=\"background-color:<%=segments[i].fillColor%>\"></span> <%if(segments[i].label){%> <%=segments[i].label%> : <%=segments[i].value%><%}%></li><%}%></ul>"
                    });

                    var legendHolder = document.createElement('div');
                    legendHolder.innerHTML = moduleDoughnut.generateLegend();
                    // Include a html legend template after the module doughnut itself
                    helpers.each(legendHolder.firstChild.childNodes, function(legendNode, index){
                        helpers.addEvent(legendNode, 'mouseover', function(){
                            var activeSegment = moduleDoughnut.segments[index];
                            activeSegment.save();
                            activeSegment.fillColor = activeSegment.highlightColor;
                            moduleDoughnut.showTooltip([activeSegment]);
                            activeSegment.restore();
                        });
                    });
                    helpers.addEvent(legendHolder.firstChild, 'mouseout', function(){
                        moduleDoughnut.draw();
                    });
                    canvas.parentNode.parentNode.appendChild(legendHolder.firstChild);

                })();
                    
                //função que retorna um número hexadecimal aleatório entre 0 e 255 (FF):
                function Hx() { return parseInt((Math.random() * 255)).toString(16); }

                //Função para retornar o código completo da cor, com 3 números aleatórios:
                function CorAleat(colors) { 

                    var cor = "#" + Hx() + Hx() + Hx();

                    while ("#ffffff" == cor || "#000000" == cor || cor.length < 7 || (!colors.length != 0 && cor in colors)) {
                        cor = "#" + Hx() + Hx() + Hx();
                    }

                    return cor; 
                }

                function Colour(col, amt) {

                    var usePound = false;

                    if (col[0] == "#") {
                        col = col.slice(1);
                        usePound = true;
                    }

                    var num = parseInt(col,16);

                    var r = (num >> 16) + amt;

                    if (r > 255) r = 255;
                    else if  (r < 0) r = 0;

                    var b = ((num >> 8) & 0x00FF) + amt;

                    if (b > 255) b = 255;
                    else if  (b < 0) b = 0;

                    var g = (num & 0x0000FF) + amt;

                    if (g > 255) g = 255;
                    else if (g < 0) g = 0;

                    return (usePound?"#":"") + (g | (b << 8) | (r << 16)).toString(16);

                }
                
                
                
                function corAleatoriaProxima(corBase, variacaoMaxima) {
                    // Converter a cor base para RGB
                    const rBase = parseInt(corBase.slice(1, 3), 16);
                    const gBase = parseInt(corBase.slice(3, 5), 16);
                    const bBase = parseInt(corBase.slice(5, 7), 16);

                    // Gerar variações aleatórias nos canais de cores
                    const rVariacao = Math.floor(Math.random() * variacaoMaxima) - variacaoMaxima / 2;
                    const gVariacao = Math.floor(Math.random() * variacaoMaxima) - variacaoMaxima / 2;
                    const bVariacao = Math.floor(Math.random() * variacaoMaxima) - variacaoMaxima / 2;

                    // Calcular a nova cor
                    const r = clamp(rBase + rVariacao, 0, 255);
                    const g = clamp(gBase + gVariacao, 0, 255);
                    const b = clamp(bBase + bVariacao, 0, 255);

                    // Converter a nova cor de volta para hexadecimal
                    const novaCor = "#"+componenteHexadecimal(r) +""+componenteHexadecimal(g)+""+componenteHexadecimal(b)+"";

                    return novaCor;
                }

                function componenteHexadecimal(valor) {
                    const hex = valor.toString(16);
                    return hex.length === 1 ? "0"+hex : hex;
                }

                function clamp(valor, min, max) {
                    return Math.min(Math.max(valor, min), max);
                }

            })();
                
            // ]]>
                
        </script>

    </cc:implementation>
</ui:composition>